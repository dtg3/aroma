<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" revision="0.8.0" language="C++" filename="while.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using <namespace>namespace <name>std</name>;</namespace></using>

<aroma refactor="add_parameter">
<function><type><name>int</name></type> <name>successor</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list> <block>{
  <return>return <expr><operator>++</operator><name>a</name></expr>;</return>
}</block></function></aroma>

<function><type><name>int</name></type> <name>main</name> <parameter_list>()</parameter_list>
<block>{
   <comment type="line">// Local variable declaration:</comment>
   <decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

   <comment type="line">// while loop execution</comment>
   <while>while<condition>( <expr><name>a</name> <operator>&lt;</operator> <literal type="number">20</literal></expr> )</condition>
   <block>{
       <if>if <condition>(<expr><name>a</name> <operator>%</operator> <literal type="number">2</literal> <operator>=</operator> <literal type="number">0</literal></expr>)</condition><then>
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"value of a (even): "</literal> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></then>
       <else>else
        <block type="pseudo"><expr_stmt><expr><name>cout</name> <operator>&lt;&lt;</operator> <literal type="string">"value of a (odd): "</literal> <operator>&lt;&lt;</operator> <name>a</name> <operator>&lt;&lt;</operator> <name>endl</name></expr>;</expr_stmt></block></else></if>
       
        <expr_stmt><expr><call><name>successor</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></while>
 
   <return>return <expr><literal type="number">0</literal></expr>;</return>
}</block></function></unit>
